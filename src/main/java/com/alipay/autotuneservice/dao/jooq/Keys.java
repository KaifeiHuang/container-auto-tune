/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq;


import com.alipay.autotuneservice.dao.jooq.tables.AppInfo;
import com.alipay.autotuneservice.dao.jooq.tables.AppLog;
import com.alipay.autotuneservice.dao.jooq.tables.BaseLine;
import com.alipay.autotuneservice.dao.jooq.tables.ConfigInfo;
import com.alipay.autotuneservice.dao.jooq.tables.ExpertKnowledge;
import com.alipay.autotuneservice.dao.jooq.tables.HealthCheckInfo;
import com.alipay.autotuneservice.dao.jooq.tables.HelpInfo;
import com.alipay.autotuneservice.dao.jooq.tables.JvmMarketInfo;
import com.alipay.autotuneservice.dao.jooq.tables.JvmOptsConfig;
import com.alipay.autotuneservice.dao.jooq.tables.JvmTuningRiskCenter;
import com.alipay.autotuneservice.dao.jooq.tables.K8sAccessTokenInfo;
import com.alipay.autotuneservice.dao.jooq.tables.MeterMetaInfo;
import com.alipay.autotuneservice.dao.jooq.tables.NodeInfo;
import com.alipay.autotuneservice.dao.jooq.tables.PodAttach;
import com.alipay.autotuneservice.dao.jooq.tables.PodInfo;
import com.alipay.autotuneservice.dao.jooq.tables.RiskCheckControl;
import com.alipay.autotuneservice.dao.jooq.tables.RiskCheckTask;
import com.alipay.autotuneservice.dao.jooq.tables.StorageInfo;
import com.alipay.autotuneservice.dao.jooq.tables.TaskPipelineInfo;
import com.alipay.autotuneservice.dao.jooq.tables.TuneLogInfo;
import com.alipay.autotuneservice.dao.jooq.tables.TuneParamInfo;
import com.alipay.autotuneservice.dao.jooq.tables.TunePipeline;
import com.alipay.autotuneservice.dao.jooq.tables.TunePipelinePhase;
import com.alipay.autotuneservice.dao.jooq.tables.TunePlan;
import com.alipay.autotuneservice.dao.jooq.tables.TunePoolInfo;
import com.alipay.autotuneservice.dao.jooq.tables.TuningParamTaskData;
import com.alipay.autotuneservice.dao.jooq.tables.TuningParamTaskDataDev;
import com.alipay.autotuneservice.dao.jooq.tables.TuningParamTaskInfo;
import com.alipay.autotuneservice.dao.jooq.tables.TuningParamTrialData;
import com.alipay.autotuneservice.dao.jooq.tables.UserInfo;
import com.alipay.autotuneservice.dao.jooq.tables.records.AppInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.AppLogRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.BaseLineRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.ConfigInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.ExpertKnowledgeRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.HealthCheckInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.HelpInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.JvmMarketInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.JvmOptsConfigRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.JvmTuningRiskCenterRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.K8sAccessTokenInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.MeterMetaInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.NodeInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.PodAttachRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.PodInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.RiskCheckControlRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.RiskCheckTaskRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.StorageInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TaskPipelineInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuneLogInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuneParamInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TunePipelinePhaseRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TunePipelineRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TunePlanRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TunePoolInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTaskDataDevRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTaskDataRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTaskInfoRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTrialDataRecord;
import com.alipay.autotuneservice.dao.jooq.tables.records.UserInfoRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * tmaestro-lite.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AppInfoRecord> KEY_APP_INFO_APP_INFO_APP_NAME_ACCESS_TOKEN_UINDEX = Internal.createUniqueKey(AppInfo.APP_INFO, DSL.name("KEY_app_info_app_info_APP_NAME_ACCESS_TOKEN_uindex"), new TableField[] { AppInfo.APP_INFO.APP_NAME, AppInfo.APP_INFO.ACCESS_TOKEN, AppInfo.APP_INFO.NAMESPACE }, true);
    public static final UniqueKey<AppInfoRecord> KEY_APP_INFO_PRIMARY = Internal.createUniqueKey(AppInfo.APP_INFO, DSL.name("KEY_app_info_PRIMARY"), new TableField[] { AppInfo.APP_INFO.ID }, true);
    public static final UniqueKey<AppLogRecord> KEY_APP_LOG_PRIMARY = Internal.createUniqueKey(AppLog.APP_LOG, DSL.name("KEY_app_log_PRIMARY"), new TableField[] { AppLog.APP_LOG.ID }, true);
    public static final UniqueKey<BaseLineRecord> KEY_BASE_LINE_PRIMARY = Internal.createUniqueKey(BaseLine.BASE_LINE, DSL.name("KEY_base_line_PRIMARY"), new TableField[] { BaseLine.BASE_LINE.ID }, true);
    public static final UniqueKey<ConfigInfoRecord> KEY_CONFIG_INFO_CONFIG_INFO_APP_ID_INDEX = Internal.createUniqueKey(ConfigInfo.CONFIG_INFO, DSL.name("KEY_config_info_config_info_app_id_index"), new TableField[] { ConfigInfo.CONFIG_INFO.APP_ID }, true);
    public static final UniqueKey<ConfigInfoRecord> KEY_CONFIG_INFO_PRIMARY = Internal.createUniqueKey(ConfigInfo.CONFIG_INFO, DSL.name("KEY_config_info_PRIMARY"), new TableField[] { ConfigInfo.CONFIG_INFO.ID }, true);
    public static final UniqueKey<ExpertKnowledgeRecord> KEY_EXPERT_KNOWLEDGE_PRIMARY = Internal.createUniqueKey(ExpertKnowledge.EXPERT_KNOWLEDGE, DSL.name("KEY_expert_knowledge_PRIMARY"), new TableField[] { ExpertKnowledge.EXPERT_KNOWLEDGE.ID }, true);
    public static final UniqueKey<HealthCheckInfoRecord> KEY_HEALTH_CHECK_INFO_PRIMARY = Internal.createUniqueKey(HealthCheckInfo.HEALTH_CHECK_INFO, DSL.name("KEY_health_check_info_PRIMARY"), new TableField[] { HealthCheckInfo.HEALTH_CHECK_INFO.ID }, true);
    public static final UniqueKey<HelpInfoRecord> KEY_HELP_INFO_PRIMARY = Internal.createUniqueKey(HelpInfo.HELP_INFO, DSL.name("KEY_help_info_PRIMARY"), new TableField[] { HelpInfo.HELP_INFO.ID }, true);
    public static final UniqueKey<JvmMarketInfoRecord> KEY_JVM_MARKET_INFO_PRIMARY = Internal.createUniqueKey(JvmMarketInfo.JVM_MARKET_INFO, DSL.name("KEY_jvm_market_info_PRIMARY"), new TableField[] { JvmMarketInfo.JVM_MARKET_INFO.ID }, true);
    public static final UniqueKey<JvmOptsConfigRecord> KEY_JVM_OPTS_CONFIG_PRIMARY = Internal.createUniqueKey(JvmOptsConfig.JVM_OPTS_CONFIG, DSL.name("KEY_jvm_opts_config_PRIMARY"), new TableField[] { JvmOptsConfig.JVM_OPTS_CONFIG.ID }, true);
    public static final UniqueKey<JvmTuningRiskCenterRecord> KEY_JVM_TUNING_RISK_CENTER_JVM_TUNING_RISK_CENTER_APPID_METRIC_DT_UINDEX = Internal.createUniqueKey(JvmTuningRiskCenter.JVM_TUNING_RISK_CENTER, DSL.name("KEY_jvm_tuning_risk_center_jvm_tuning_risk_center_appId_metric_dt_uindex"), new TableField[] { JvmTuningRiskCenter.JVM_TUNING_RISK_CENTER.APPID, JvmTuningRiskCenter.JVM_TUNING_RISK_CENTER.METRIC, JvmTuningRiskCenter.JVM_TUNING_RISK_CENTER.DT }, true);
    public static final UniqueKey<JvmTuningRiskCenterRecord> KEY_JVM_TUNING_RISK_CENTER_PRIMARY = Internal.createUniqueKey(JvmTuningRiskCenter.JVM_TUNING_RISK_CENTER, DSL.name("KEY_jvm_tuning_risk_center_PRIMARY"), new TableField[] { JvmTuningRiskCenter.JVM_TUNING_RISK_CENTER.ID }, true);
    public static final UniqueKey<K8sAccessTokenInfoRecord> KEY_K8S_ACCESS_TOKEN_INFO_PRIMARY = Internal.createUniqueKey(K8sAccessTokenInfo.K8S_ACCESS_TOKEN_INFO, DSL.name("KEY_k8s_access_token_info_PRIMARY"), new TableField[] { K8sAccessTokenInfo.K8S_ACCESS_TOKEN_INFO.ID }, true);
    public static final UniqueKey<MeterMetaInfoRecord> KEY_METER_META_INFO_PRIMARY = Internal.createUniqueKey(MeterMetaInfo.METER_META_INFO, DSL.name("KEY_meter_meta_info_PRIMARY"), new TableField[] { MeterMetaInfo.METER_META_INFO.ID }, true);
    public static final UniqueKey<NodeInfoRecord> KEY_NODE_INFO_NODE_INFO_NODE_NAME_ACCESS_TOKEN_UINDEX = Internal.createUniqueKey(NodeInfo.NODE_INFO, DSL.name("KEY_node_info_node_info_NODE_NAME_ACCESS_TOKEN_uindex"), new TableField[] { NodeInfo.NODE_INFO.NODE_NAME, NodeInfo.NODE_INFO.ACCESS_TOKEN }, true);
    public static final UniqueKey<NodeInfoRecord> KEY_NODE_INFO_PRIMARY = Internal.createUniqueKey(NodeInfo.NODE_INFO, DSL.name("KEY_node_info_PRIMARY"), new TableField[] { NodeInfo.NODE_INFO.ID }, true);
    public static final UniqueKey<PodAttachRecord> KEY_POD_ATTACH_PRIMARY = Internal.createUniqueKey(PodAttach.POD_ATTACH, DSL.name("KEY_pod_attach_PRIMARY"), new TableField[] { PodAttach.POD_ATTACH.ID }, true);
    public static final UniqueKey<PodInfoRecord> KEY_POD_INFO_POD_INFO_POD_NAME_ACCESS_TOKEN_UINDEX = Internal.createUniqueKey(PodInfo.POD_INFO, DSL.name("KEY_pod_info_pod_info_POD_NAME_ACCESS_TOKEN_uindex"), new TableField[] { PodInfo.POD_INFO.POD_NAME, PodInfo.POD_INFO.ACCESS_TOKEN }, true);
    public static final UniqueKey<PodInfoRecord> KEY_POD_INFO_PRIMARY = Internal.createUniqueKey(PodInfo.POD_INFO, DSL.name("KEY_pod_info_PRIMARY"), new TableField[] { PodInfo.POD_INFO.ID }, true);
    public static final UniqueKey<RiskCheckControlRecord> KEY_RISK_CHECK_CONTROL_PRIMARY = Internal.createUniqueKey(RiskCheckControl.RISK_CHECK_CONTROL, DSL.name("KEY_risk_check_control_PRIMARY"), new TableField[] { RiskCheckControl.RISK_CHECK_CONTROL.ID }, true);
    public static final UniqueKey<RiskCheckTaskRecord> KEY_RISK_CHECK_TASK_PRIMARY = Internal.createUniqueKey(RiskCheckTask.RISK_CHECK_TASK, DSL.name("KEY_risk_check_task_PRIMARY"), new TableField[] { RiskCheckTask.RISK_CHECK_TASK.ID }, true);
    public static final UniqueKey<StorageInfoRecord> KEY_STORAGE_INFO_PRIMARY = Internal.createUniqueKey(StorageInfo.STORAGE_INFO, DSL.name("KEY_storage_info_PRIMARY"), new TableField[] { StorageInfo.STORAGE_INFO.ID }, true);
    public static final UniqueKey<TaskPipelineInfoRecord> KEY_TASK_PIPELINE_INFO_PRIMARY = Internal.createUniqueKey(TaskPipelineInfo.TASK_PIPELINE_INFO, DSL.name("KEY_task_pipeline_info_PRIMARY"), new TableField[] { TaskPipelineInfo.TASK_PIPELINE_INFO.ID }, true);
    public static final UniqueKey<TuneLogInfoRecord> KEY_TUNE_LOG_INFO_PRIMARY = Internal.createUniqueKey(TuneLogInfo.TUNE_LOG_INFO, DSL.name("KEY_tune_log_info_PRIMARY"), new TableField[] { TuneLogInfo.TUNE_LOG_INFO.ID }, true);
    public static final UniqueKey<TuneLogInfoRecord> KEY_TUNE_LOG_INFO_TUNE_LOG_INFO_ID_APP_ID_JVM_MARKET_ID_BATCH_NO_UINDEX = Internal.createUniqueKey(TuneLogInfo.TUNE_LOG_INFO, DSL.name("KEY_tune_log_info_tune_log_info_ID_APP_ID_JVM_MARKET_ID_BATCH_NO_uindex"), new TableField[] { TuneLogInfo.TUNE_LOG_INFO.ID, TuneLogInfo.TUNE_LOG_INFO.APP_ID, TuneLogInfo.TUNE_LOG_INFO.JVM_MARKET_ID, TuneLogInfo.TUNE_LOG_INFO.BATCH_NO }, true);
    public static final UniqueKey<TuneLogInfoRecord> KEY_TUNE_LOG_INFO_TUNE_LOG_INFO_PIPELINE_ID_APP_ID_JVM_MARKET_ID_BATCH_NO_UINDEX = Internal.createUniqueKey(TuneLogInfo.TUNE_LOG_INFO, DSL.name("KEY_tune_log_info_tune_log_info_PIPELINE_ID_APP_ID_JVM_MARKET_ID_BATCH_NO_uindex"), new TableField[] { TuneLogInfo.TUNE_LOG_INFO.PIPELINE_ID, TuneLogInfo.TUNE_LOG_INFO.APP_ID, TuneLogInfo.TUNE_LOG_INFO.JVM_MARKET_ID, TuneLogInfo.TUNE_LOG_INFO.BATCH_NO }, true);
    public static final UniqueKey<TuneParamInfoRecord> KEY_TUNE_PARAM_INFO_PRIMARY = Internal.createUniqueKey(TuneParamInfo.TUNE_PARAM_INFO, DSL.name("KEY_tune_param_info_PRIMARY"), new TableField[] { TuneParamInfo.TUNE_PARAM_INFO.ID }, true);
    public static final UniqueKey<TuneParamInfoRecord> KEY_TUNE_PARAM_INFO_TUNE_PARAM_INFO_ID_UINDEX = Internal.createUniqueKey(TuneParamInfo.TUNE_PARAM_INFO, DSL.name("KEY_tune_param_info_tune_param_info_ID_uindex"), new TableField[] { TuneParamInfo.TUNE_PARAM_INFO.ID }, true);
    public static final UniqueKey<TunePipelineRecord> KEY_TUNE_PIPELINE_PRIMARY = Internal.createUniqueKey(TunePipeline.TUNE_PIPELINE, DSL.name("KEY_tune_pipeline_PRIMARY"), new TableField[] { TunePipeline.TUNE_PIPELINE.ID }, true);
    public static final UniqueKey<TunePipelinePhaseRecord> KEY_TUNE_PIPELINE_PHASE_PRIMARY = Internal.createUniqueKey(TunePipelinePhase.TUNE_PIPELINE_PHASE, DSL.name("KEY_tune_pipeline_phase_PRIMARY"), new TableField[] { TunePipelinePhase.TUNE_PIPELINE_PHASE.ID }, true);
    public static final UniqueKey<TunePlanRecord> KEY_TUNE_PLAN_PRIMARY = Internal.createUniqueKey(TunePlan.TUNE_PLAN, DSL.name("KEY_tune_plan_PRIMARY"), new TableField[] { TunePlan.TUNE_PLAN.ID }, true);
    public static final UniqueKey<TunePoolInfoRecord> KEY_TUNE_POOL_INFO_PRIMARY = Internal.createUniqueKey(TunePoolInfo.TUNE_POOL_INFO, DSL.name("KEY_tune_pool_info_PRIMARY"), new TableField[] { TunePoolInfo.TUNE_POOL_INFO.ID }, true);
    public static final UniqueKey<TuningParamTaskDataRecord> KEY_TUNING_PARAM_TASK_DATA_PRIMARY = Internal.createUniqueKey(TuningParamTaskData.TUNING_PARAM_TASK_DATA, DSL.name("KEY_tuning_param_task_data_PRIMARY"), new TableField[] { TuningParamTaskData.TUNING_PARAM_TASK_DATA.PIPELINE_ID }, true);
    public static final UniqueKey<TuningParamTaskDataDevRecord> KEY_TUNING_PARAM_TASK_DATA_DEV_PRIMARY = Internal.createUniqueKey(TuningParamTaskDataDev.TUNING_PARAM_TASK_DATA_DEV, DSL.name("KEY_tuning_param_task_data_dev_PRIMARY"), new TableField[] { TuningParamTaskDataDev.TUNING_PARAM_TASK_DATA_DEV.PIPELINE_ID }, true);
    public static final UniqueKey<TuningParamTaskInfoRecord> KEY_TUNING_PARAM_TASK_INFO_PRIMARY = Internal.createUniqueKey(TuningParamTaskInfo.TUNING_PARAM_TASK_INFO, DSL.name("KEY_tuning_param_task_info_PRIMARY"), new TableField[] { TuningParamTaskInfo.TUNING_PARAM_TASK_INFO.INFO_ID }, true);
    public static final UniqueKey<TuningParamTrialDataRecord> KEY_TUNING_PARAM_TRIAL_DATA_PRIMARY = Internal.createUniqueKey(TuningParamTrialData.TUNING_PARAM_TRIAL_DATA, DSL.name("KEY_tuning_param_trial_data_PRIMARY"), new TableField[] { TuningParamTrialData.TUNING_PARAM_TRIAL_DATA.ID }, true);
    public static final UniqueKey<UserInfoRecord> KEY_USER_INFO_PRIMARY = Internal.createUniqueKey(UserInfo.USER_INFO, DSL.name("KEY_user_info_PRIMARY"), new TableField[] { UserInfo.USER_INFO.ID }, true);
}
