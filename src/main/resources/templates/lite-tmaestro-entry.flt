#!/bin/bash

echo -e "==> Step.1: Updating kubectl context and validating cluster access"
if ! [ -x "$(command -v jq)" ]; then
  echo "Error: jq is not installed"
  exit 1
fi

if ! [ -x "$(command -v kubectl)" ]; then
  echo "Error: kubectl is not installed. (kubectl required to install tmaestro)"
  exit 1
fi

REGION=[=region]
CLUSTER_NAME=[=clusterName]

TMAESTRO_SERVER_URL=[=tmaestro_server_url]
check_cluster_register_tmaestro(){
    res=$(curl -s  "${TMAESTRO_SERVER_URL}/api/accessToken/validate?accessToken=[=accessToken]&clusterName=[=clusterName]" | jq '.data')
    if [ "${res}" = 'true'  ]; then
        echo "SUCCESS!!!"
        exit 0
    fi
    return 0
}
check_cluster_register_tmaestro

endpoint=""

echo "ENDPOINT=${endpoint}"
echo "ACCESS_KEY_ID=${AccessKeyId}"
echo "SECRET_ACCESS_KEY=${SecretAccessKey}"
echo "CLUSTER_NAME=${CLUSTER_NAME}"
echo "CLUSTER_ID=${CLUSTER_ID}"
echo "REGION=[=region]"
echo "ACCESS_TOKEN=[=accessToken]"

echo -e "\n==> Step.4: Register cluster information on Tmaestro"
res_code=$(curl -s -X POST "${TMAESTRO_SERVER_URL}/api/accessToken/saveAccessToken" -H 'Content-Type: application/json' -d "$(generate_post_data)" | jq '.resultCode')
if [ "${res_code}" != 200 ]; then
      echo "save user cluster info failed. pls contact tmaestro expert."
      exit 119;
fi

echo -e "\n==> Step.5: Install TWatch demonset"
TWATCH_YAML_FILE=twatch.yaml
TWATCH_POD_PREFIX=`echo "${TWATCH_YAML_FILE}" | awk -F'.' '{print $1}'`

# download demonSet yaml
curl -s -o "${TWATCH_YAML_FILE}"  "${TMAESTRO_SERVER_URL}/api/storage/download/${TWATCH_YAML_FILE}"
ls -l "${TWATCH_YAML_FILE}" >/dev/null 2>&1
if [ $? != 0 ]; then
  echo "Download twatch.yaml file failed, pls contact the tmaestro experts to handle it.";
  exit 119
fi

# delete existed twatch demonSet
kubectl get pods | grep "${TWATCH_POD_PREFIX}" >/dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "There are twatch demonset on this system. So will remove it and redeploy it"
  kubectl delete ds "${TWATCH_POD_PREFIX}" --ignore-not-found=true >/dev/null 2>&1
fi

install_demonset(){
    echo -ne '[ ========>                                                       (10%)]\r'
    kubectl apply -f "${TWATCH_YAML_FILE}" >/dev/null 2>&1
    echo -ne '[ ================================>                               (53%)]\r'
    sleep 10
    kubectl get pods | grep "${TWATCH_POD_PREFIX}"
    kubectl get pods | grep "${TWATCH_POD_PREFIX}" | grep Running
    if [ $? != 0 ]; then
      echo "Install twatch demonSet failed, please contact tmaestro experts to handle it!"
      exit 119
    fi
    echo -ne '[ ================================================================(100%)]\r'
    echo -ne '\n'
}

print_tmaestro(){
  echo '  ______    __  ___                         __                ';
  echo ' /_  __/   /  |/  /  ____ _  ___    _____  / /_   _____  ____ ';
  echo '  / /     / /|_/ /  / __ \`/ / _ \  / ___/ / __/  / ___/ / __ \';
  echo ' / /     / /  / /  / /_/ / /  __/ (__  ) / /_   / /    / /_/ /';
  echo '/_/     /_/  /_/   \__,_/  \___/ /____/  \__/  /_/     \____/ ';
  echo '                                                               ';
}

CONGRATULATION_SIGN='Congratulations!!!'

install_demonset
print_tmaestro
echo "${CONGRATULATION_SIGN} TWatch demonset is now installed successfully.\n"

echo -e "\n==> Step.6: Install metric-server"
install_metric_server(){
    echo -ne '[ ========>                                                       (10%)]\r'
    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml >/dev/null 2>&1
    echo -ne '[ ================================>                               (60%)]\r'
    if [ $? != 0 ]; then
      echo "install metric-server failed, please contact the tmaestro expert."
      exit 119
    fi
    echo -ne '[ ================================================================(100%)]\r'
    echo -ne '\n'
    echo "${CONGRATULATION_SIGN} Install metric-server successfully.\n"
}

TMAESTRO_HOME_PAGE_URL=[=TMAESTRO_HOME_PAGE_URL]
kubectl get pod -n kube-system | grep metrics-server | grep Running >/dev/null 2>&1
if [ $? -eq 0 ]; then
   echo "The metric-server has been installed. so skip it."
   echo "All steps have been done now, please go to TMaestro homepage(${TMAESTRO_HOME_PAGE_URL}) to experience."
   exit 0
fi
install_metric_server

echo "All steps have been done now, please go to TMaestro homepage(${TMAESTRO_HOME_PAGE_URL}) to experience."
exit 0